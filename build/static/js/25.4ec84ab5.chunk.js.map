{"version":3,"sources":["services/RoomseServices.js","components/rooms/RoomsTable.js","pages/Rooms.js","components/table/ShowHideButton.js"],"names":["RoomServices","getAllRooms","_ref","page","limit","title","type","userId","searchTitle","searchType","id","undefined","requests","get","getRoomById","updateRoomById","body","put","deleteRoom","delete","RoomsTable","rooms","roomId","setRoomId","useState","toggleModal","useContext","SidebarContext","setTitle","_jsxs","_Fragment","children","_jsx","MainModal","TableBody","map","room","_room$hostIds$","_room$hostIds$2","TableRow","TableCell","className","dayjs","createdAt","format","productIds","length","name","price","discount","hostIds","firstName","lastName","userIds","ended","event","Badge","_id","Customers","state","dispatch","AdminContext","adminInfo","currentPage","handleChangePage","searchText","category","searchRef","handleSubmitForAll","sortedField","limitData","location","useLocation","URLSearchParams","search","data","loading","useAsync","RoomseServices","userid","role","serviceData","handleOnDrop","handleUploadProducts","useFilter","PageTitle","Card","CardBody","onSubmit","Input","ref","placeholder","Loading","TableContainer","Table","TableHeader","TableFooter","Pagination","totalResults","totalDoc","resultsPerPage","onChange","label","NotFound","ShowHideButton","status","customValue","customeKey","setIsUpdate","onClick","handleChangeStatus","console","log","notifySuccess","pathname","UserServices","updateUserById","accountDisabled","then","res","catch","err","notifyError","message","ProductServices","updateProduct","available","ShopServices","updateShop","open","BsToggleOn","BsToggleOff"],"mappings":"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","file":"static/js/25.4ec84ab5.chunk.js","sourcesContent":["import requests from \"./httpService\";\n\nconst RoomServices = {\n  getAllRooms({ page, limit, title, type,userId }) {\n    const searchTitle = title !== null ? title : \"\";\n    const searchType = type !== null ? type : \"\";\n    const id = userId !== null && userId != undefined ? userId : \"\";\n    return requests.get(\n      `/rooms/allrooms/paginated?page=${page}&limit=${limit}&title=${searchTitle}&type=${searchType}&userid=${id}`\n    );\n  },\n\n  getRoomById(id) {\n    return requests.get(`/rooms/rooms/${id}`);\n  },\n  updateRoomById(id, body) {\n    return requests.put(`/rooms/rooms/updatenew/${id}`, body);\n  },\n\n  deleteRoom(id) {\n    return requests.delete(`/rooms/rooms/${id}`);\n  },\n};\n\nexport default RoomServices;\n","import React, { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as dayjs from \"dayjs\";\nimport { TableCell, TableBody, TableRow, Badge } from \"@windmill/react-ui\";\nimport { FiZoomIn, FiTrash2 } from \"react-icons/fi\";\n\nimport Tooltip from \"../tooltip/Tooltip\";\nimport MainModal from \"../modal/MainModal\";\nimport { SidebarContext } from \"../../context/SidebarContext\";\nimport ShowHideButton from \"../table/ShowHideButton\";\n\nconst RoomsTable = ({ rooms }) => {\n  const [roomId, setRoomId] = useState(\"\");\n  const { toggleModal } = useContext(SidebarContext);\n  const [title, setTitle] = useState(\"\");\n\n  const handleModalOpen = (id, title) => {\n    setRoomId(id);\n    toggleModal();\n    setTitle(title);\n  };\n\n  return (\n    <>\n      <MainModal id={roomId} title={title} />\n      <TableBody>\n        {rooms?.map((room) => (\n          <TableRow key={room._id}>\n            <TableCell>\n              <span className=\"text-sm\">\n                {dayjs(room.createdAt).format(\"MMM D, YYYY\")}\n              </span>\n            </TableCell>\n            <TableCell>\n              <span className=\"text-sm\">{room.title}</span>\n            </TableCell>\n            <TableCell>\n              {room.productIds.length > 0 ? (\n                <>\n                  <span className=\"text-sm\">{room.productIds[0].name}</span>{\" \"}\n                  <br />${\"\"}\n                  <span className=\"text-sm\">{room.productIds[0].price}</span>\n                  <span className=\"text-sm\">\n                    {room.productIds[0].discount\n                      ? `Discounted ${room.productIds[0].discount}`\n                      : \"\"}\n                  </span>{\" \"}\n                </>\n              ) : (\n                <p></p>\n              )}\n            </TableCell>\n            <TableCell>\n              <span className=\"text-sm font-medium\">\n                {room.hostIds[0]?.firstName} {room.hostIds[0]?.lastName}\n              </span>\n            </TableCell>\n            <TableCell>\n              <span className=\"text-sm font-medium\">{room.userIds.length}</span>\n            </TableCell>\n            <TableCell>\n              {room.ended == false ? (\n                room.event == true ? (\n                  <Badge type=\"success\">Upcoming</Badge>\n                ) : (\n                  <Badge type=\"success\">Live</Badge>\n                )\n              ) : (\n                <Badge type=\"danger\">Ended</Badge>\n              )}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </>\n  );\n};\n\nexport default RoomsTable;\n","import React, { useContext } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableCell,\n  TableFooter,\n  TableContainer,\n  Input,\n  Card,\n  CardBody,\n  Pagination,\n} from \"@windmill/react-ui\";\n\nimport useAsync from \"../hooks/useAsync\";\nimport useFilter from \"../hooks/useFilter\";\nimport NotFound from \"../components/table/NotFound\";\nimport RoomseServices from \"../services/RoomseServices\";\nimport Loading from \"../components/preloader/Loading\";\nimport PageTitle from \"../components/Typography/PageTitle\";\nimport RoomsTable from \"../components/rooms/RoomsTable\";\nimport { useLocation } from \"react-router-dom\";\nimport { SidebarContext } from \"../context/SidebarContext\";\nimport { AdminContext } from \"../context/AdminContext\";\nconst Customers = () => {\n  const { state, dispatch } = useContext(AdminContext);\n  const { adminInfo } = state;\n  const {\n    currentPage,\n    handleChangePage,\n    searchText,\n    category,\n    searchRef,\n    handleSubmitForAll,\n    sortedField,\n    limitData,\n  } = useContext(SidebarContext);\n\n  const location = useLocation();\n  const query = new URLSearchParams(location.search);\n  const type = query.get(\"type\");\n  const { data, loading } = useAsync(() =>\n    RoomseServices.getAllRooms({\n      page: currentPage,\n      limit: limitData,\n      category: category,\n      type,\n      title: searchText,\n      price: sortedField,\n      userid: adminInfo.role == \"shopowner\" ? adminInfo._id : \"\",\n    })\n  );\n\n  const { serviceData, handleOnDrop, handleUploadProducts } = useFilter(\n    data.rooms\n  );\n\n  return (\n    <>\n      <PageTitle>Rooms</PageTitle>\n      <Card className=\"min-w-0 shadow-xs overflow-hidden bg-white dark:bg-gray-800 mb-5\">\n        <CardBody>\n          <form\n            onSubmit={handleSubmitForAll}\n            className=\"py-3 grid gap-4 lg:gap-6 xl:gap-6 md:flex xl:flex\"\n          >\n            <div className=\"flex-grow-0 md:flex-grow lg:flex-grow xl:flex-grow\">\n              <Input\n                ref={searchRef}\n                className=\"border h-12 text-sm focus:outline-none block w-full bg-gray-100 border-transparent focus:bg-white\"\n                type=\"search\"\n                name=\"search\"\n                placeholder=\"Search by title\"\n              />\n              <button\n                type=\"submit\"\n                className=\"absolute right-0 top-0 mt-5 mr-1\"\n              ></button>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n\n      {loading ? (\n        <Loading loading={loading} />\n      ) : serviceData.length !== 0 ? (\n        <TableContainer className=\"mb-8\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Created Date</TableCell>\n                <TableCell>Title</TableCell>\n                <TableCell>Product</TableCell>\n                <TableCell>Host</TableCell>\n                <TableCell>Live Users</TableCell>\n                <TableCell>Status</TableCell>\n              </tr>\n            </TableHeader>\n            <RoomsTable rooms={data.rooms} />\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={data.totalDoc}\n              resultsPerPage={limitData}\n              onChange={handleChangePage}\n              label=\"Table navigation\"\n            />\n          </TableFooter>\n        </TableContainer>\n      ) : (\n        <NotFound title=\"Room\" />\n      )}\n    </>\n  );\n};\n\nexport default Customers;\n","import React, { useContext } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { BsToggleOff, BsToggleOn } from \"react-icons/bs\";\n\nimport { notifySuccess, notifyError } from \"../../utils/toast\";\nimport ProductServices from \"../../services/ProductServices\";\nimport { SidebarContext } from \"../../context/SidebarContext\";\nimport UserServices from \"../../services/UserServices\";\nimport ShopServices from \"../../services/ShopServices\";\n\nconst ShowHideButton = ({ id, status, customValue = \"\", customeKey = \"\" }) => {\n  const location = useLocation();\n  const { setIsUpdate } = useContext(SidebarContext);\n\n  const handleChangeStatus = (id, status) => {\n    console.log(status);\n    notifySuccess(\"please wait...\");\n    if (location.pathname === \"/users\") {\n      UserServices.updateUserById(id, { accountDisabled: status })\n        .then((res) => {\n          setIsUpdate(true);\n          notifySuccess(\"status updated\");\n        })\n        .catch((err) => notifyError(err.message));\n    }\n\n    if (location.pathname === \"/products\") {\n      console.log(customeKey);\n      if ((customeKey = \"feature\")) {\n        ProductServices.updateProduct(id, { [customeKey]: customValue })\n          .then((res) => {\n            console.log(res);\n            setIsUpdate(true);\n            notifySuccess(\"status updated\");\n          })\n          .catch((err) => notifyError(err.message));\n      } else {\n        ProductServices.updateProduct(id, { available: !status })\n          .then((res) => {\n            console.log(res);\n            setIsUpdate(true);\n            notifySuccess(\"status updated\");\n          })\n          .catch((err) => notifyError(err.message));\n      }\n    }\n\n    if (location.pathname === \"/shops\") {\n      ShopServices.updateShop(id, { open: !status })\n        .then((res) => {\n          console.log(res);\n          setIsUpdate(true);\n          notifySuccess(\"status updated\");\n        })\n        .catch((err) => notifyError(err.message));\n    }\n  };\n\n  return (\n    <span\n      className=\"cursor-pointer text-xl flex justify-center text-center\"\n      onClick={() => handleChangeStatus(id, status)}\n    >\n      {status == true ? (\n        <BsToggleOn className=\"text-green-500\" />\n      ) : (\n        <BsToggleOff className=\"text-orange-500\" />\n      )}\n    </span>\n  );\n};\n\nexport default ShowHideButton;\n"],"sourceRoot":""}