{"version":3,"sources":["components/product/ProductTable.js","pages/Products.js","components/table/ShowHideButton.js"],"names":["ProductTable","_ref","products","title","serviceId","handleModalOpen","handleUpdate","useToggleDrawer","_jsxs","_Fragment","children","_jsx","MainModal","id","MainDrawer","ProductDrawer","TableBody","map","product","i","TableRow","TableCell","className","Avatar","src","images","alt","name","interest","e","price","quantity","Badge","type","discountedPrice","Link","to","_id","Tooltip","Icon","FiZoomIn","bgColor","ShowHideButton","status","available","feature","customValue","customeKey","EditDeleteButton","React","memo","Products","state","dispatch","useContext","AdminContext","adminInfo","toggleDrawer","currentPage","handleChangePage","searchText","category","setCategory","searchRef","handleSubmitForAll","sortedField","setSortedField","limitData","SidebarContext","data","loading","useAsync","ProductServices","getAllProducts","page","limit","userid","role","serviceData","useFilter","PageTitle","Card","CardBody","onSubmit","Input","ref","placeholder","Select","onChange","target","value","defaultValue","hidden","Loading","length","TableContainer","Table","TableHeader","TableFooter","Pagination","totalResults","totalDoc","resultsPerPage","label","NotFound","location","useLocation","setIsUpdate","onClick","handleChangeStatus","console","log","notifySuccess","pathname","UserServices","updateUserById","accountDisabled","then","res","catch","err","notifyError","message","updateProduct","ShopServices","updateShop","open","BsToggleOn","BsToggleOff"],"mappings":"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","file":"static/js/22.5bfa9b41.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  TableCell,\n  TableBody,\n  TableRow,\n  Badge,\n  Avatar,\n} from \"@windmill/react-ui\";\nimport { FiZoomIn } from \"react-icons/fi\";\n\nimport Tooltip from \"../tooltip/Tooltip\";\nimport MainModal from \"../modal/MainModal\";\nimport MainDrawer from \"../drawer/MainDrawer\";\nimport ProductDrawer from \"../drawer/ProductDrawer\";\nimport ShowHideButton from \"../table/ShowHideButton\";\nimport EditDeleteButton from \"../table/EditDeleteButton\";\nimport useToggleDrawer from \"../../hooks/useToggleDrawer\";\n\nconst ProductTable = ({ products }) => {\n  const { title, serviceId, handleModalOpen, handleUpdate } = useToggleDrawer();\n\n  return (\n    <>\n      <MainModal id={serviceId} title={title} />\n      <MainDrawer>\n        <ProductDrawer id={serviceId} />\n      </MainDrawer>\n      <TableBody>\n        {products?.map((product, i) => (\n          <TableRow key={i + 1}>\n            <TableCell>\n              <div className=\"flex items-center\">\n                <Avatar\n                  className=\"hidden p-1 mr-2 md:block bg-gray-50 shadow-none\"\n                  src={product.images[0]}\n                  alt={product.name}\n                />\n                <div>\n                  <h2 className=\"text-sm font-medium\">{product.name}</h2>\n                </div>\n              </div>\n            </TableCell>\n            <TableCell>\n              <div className=\"flex flex-row\">\n                {product.interest.map((e) => (\n                  <span className=\"bg-gray-200 mr-2 border-0 text-gray-500 rounded-full inline-flex items-center  px-2 py-1 text-xs font-semibold font-serif mt-2 dark:bg-gray-700 dark:text-gray-300\">\n                    {e.name}\n                  </span>\n                ))}\n              </div>\n            </TableCell>\n            <TableCell>\n              <span className=\"text-sm\">${product.price}</span>{\" \"}\n            </TableCell>\n\n            <TableCell>\n              <span className=\"text-sm\">{product.quantity}</span>{\" \"}\n            </TableCell>\n            <TableCell>\n              {product.quantity > 0 ? (\n                <Badge type=\"success\">Selling</Badge>\n              ) : (\n                <Badge type=\"danger\">Sold Out</Badge>\n              )}\n            </TableCell>\n\n            <TableCell>\n              <span className=\"text-sm\">{product.discountedPrice}</span>{\" \"}\n            </TableCell>\n            <TableCell>\n              <Link\n                to={`/product/${product._id}`}\n                className=\"flex justify-center text-center text-gray-400 hover:text-green-600\"\n              >\n                <Tooltip\n                  id=\"details\"\n                  Icon={FiZoomIn}\n                  title=\"Details\"\n                  bgColor=\"#10B981\"\n                />\n              </Link>\n            </TableCell>\n            <TableCell>\n              <ShowHideButton id={product._id} status={product.available} />\n            </TableCell>\n            <TableCell>\n              <ShowHideButton\n                id={product._id}\n                status={product.feature}\n                customValue={!product.feature}\n                customeKey=\"feature\"\n              />\n            </TableCell>\n            <TableCell>\n              <EditDeleteButton\n                id={product._id}\n                title={product.name}\n                handleUpdate={handleUpdate}\n                handleModalOpen={handleModalOpen}\n              />\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </>\n  );\n};\n\nexport default React.memo(ProductTable);\n","import React, { useContext } from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableCell,\n  TableFooter,\n  TableContainer,\n  Select,\n  Input,\n  Button,\n  Card,\n  CardBody,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport { FiPlus } from \"react-icons/fi\";\nimport { CSVReader, CSVDownloader } from \"react-papaparse\";\n\nimport useAsync from \"../hooks/useAsync\";\nimport useFilter from \"../hooks/useFilter\";\nimport NotFound from \"../components/table/NotFound\";\nimport Loading from \"../components/preloader/Loading\";\nimport ProductServices from \"../services/ProductServices\";\nimport PageTitle from \"../components/Typography/PageTitle\";\nimport { SidebarContext } from \"../context/SidebarContext\";\nimport ProductTable from \"../components/product/ProductTable\";\nimport MainDrawer from \"../components/drawer/MainDrawer\";\nimport ProductDrawer from \"../components/drawer/ProductDrawer\";\nimport { AdminContext } from \"../context/AdminContext\"; \n\n\nconst Products = () => {\n  const { state, dispatch } = useContext(AdminContext);\n  const { adminInfo } = state;\n  const {\n    toggleDrawer,\n    currentPage,\n    handleChangePage,\n    searchText,\n    category,\n    setCategory,\n    searchRef,\n    handleSubmitForAll,\n    sortedField,\n    setSortedField,\n    limitData,\n  } = useContext(SidebarContext);\n\n  const { data, loading } = useAsync(() =>\n    ProductServices.getAllProducts({\n      page: currentPage,\n      limit: limitData,\n      category: category,\n\n      title: searchText,\n      price: sortedField,\n      userid: adminInfo.role ==\"admin\"?\"\":adminInfo._id,\n    })\n  );\n  // console.log(adminInfo);\n\n  const { serviceData } = useFilter(data.products);\n\n  return (\n    <>\n      <PageTitle>Products</PageTitle>\n      <MainDrawer>\n        <ProductDrawer />\n      </MainDrawer>\n\n      <Card className=\"min-w-0 shadow-xs overflow-hidden bg-white dark:bg-gray-800 mb-5\">\n        <CardBody>\n          <form\n            onSubmit={handleSubmitForAll}\n            className=\"py-3 grid gap-4 lg:gap-6 xl:gap-6 md:flex xl:flex\"\n          >\n            <div className=\"flex-grow-0 md:flex-grow lg:flex-grow xl:flex-grow\">\n              <Input\n                ref={searchRef}\n                className=\"border h-12 text-sm focus:outline-none block w-full bg-gray-100 border-transparent focus:bg-white\"\n                type=\"search\"\n                name=\"search\"\n                placeholder=\"Search by product name\"\n              />\n              <button\n                type=\"submit\"\n                className=\"absolute right-0 top-0 mt-5 mr-1\"\n              ></button>\n            </div>\n            <div className=\"flex-grow-0 md:flex-grow lg:flex-grow xl:flex-grow\">\n              <Select\n                onChange={(e) => setSortedField(e.target.value)}\n                className=\"border h-12 text-sm focus:outline-none block w-full bg-gray-100 border-transparent focus:bg-white\"\n              >\n                <option value=\"All\" defaultValue hidden>\n                  Price\n                </option>\n                <option value=\"Low\">Low to High</option>\n                <option value=\"High\">High to Low</option>\n              </Select>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n\n      {loading ? (\n        <Loading loading={loading} />\n      ) : serviceData?.length !== 0 ? (\n        <TableContainer className=\"mb-8 rounded-b-lg\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Product name</TableCell>\n                <TableCell>Category</TableCell>\n                <TableCell>Price</TableCell>\n                <TableCell>Stock</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Discount</TableCell>\n                <TableCell>Details</TableCell>\n                <TableCell className=\"text-center\">Published</TableCell>\n                <TableCell className=\"text-center\">Featured</TableCell>\n                <TableCell className=\"text-right\">Actions</TableCell>\n              </tr>\n            </TableHeader>\n            <ProductTable products={data.products} />\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={data?.totalDoc}\n              resultsPerPage={15}\n              onChange={handleChangePage}\n              label=\"Product Page Navigation\"\n            />\n          </TableFooter>\n        </TableContainer>\n      ) : (\n        <NotFound title=\"Product\" />\n      )}\n    </>\n  );\n};\n\nexport default Products;\n","import React, { useContext } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { BsToggleOff, BsToggleOn } from \"react-icons/bs\";\n\nimport { notifySuccess, notifyError } from \"../../utils/toast\";\nimport ProductServices from \"../../services/ProductServices\";\nimport { SidebarContext } from \"../../context/SidebarContext\";\nimport UserServices from \"../../services/UserServices\";\nimport ShopServices from \"../../services/ShopServices\";\n\nconst ShowHideButton = ({ id, status, customValue = \"\", customeKey = \"\" }) => {\n  const location = useLocation();\n  const { setIsUpdate } = useContext(SidebarContext);\n\n  const handleChangeStatus = (id, status) => {\n    console.log(status);\n    notifySuccess(\"please wait...\");\n    if (location.pathname === \"/users\") {\n      UserServices.updateUserById(id, { accountDisabled: status })\n        .then((res) => {\n          setIsUpdate(true);\n          notifySuccess(\"status updated\");\n        })\n        .catch((err) => notifyError(err.message));\n    }\n\n    if (location.pathname === \"/products\") {\n      console.log(customeKey);\n      if ((customeKey = \"feature\")) {\n        ProductServices.updateProduct(id, { [customeKey]: customValue })\n          .then((res) => {\n            console.log(res);\n            setIsUpdate(true);\n            notifySuccess(\"status updated\");\n          })\n          .catch((err) => notifyError(err.message));\n      } else {\n        ProductServices.updateProduct(id, { available: !status })\n          .then((res) => {\n            console.log(res);\n            setIsUpdate(true);\n            notifySuccess(\"status updated\");\n          })\n          .catch((err) => notifyError(err.message));\n      }\n    }\n\n    if (location.pathname === \"/shops\") {\n      ShopServices.updateShop(id, { open: !status })\n        .then((res) => {\n          console.log(res);\n          setIsUpdate(true);\n          notifySuccess(\"status updated\");\n        })\n        .catch((err) => notifyError(err.message));\n    }\n  };\n\n  return (\n    <span\n      className=\"cursor-pointer text-xl flex justify-center text-center\"\n      onClick={() => handleChangeStatus(id, status)}\n    >\n      {status == true ? (\n        <BsToggleOn className=\"text-green-500\" />\n      ) : (\n        <BsToggleOff className=\"text-orange-500\" />\n      )}\n    </span>\n  );\n};\n\nexport default ShowHideButton;\n"],"sourceRoot":""}