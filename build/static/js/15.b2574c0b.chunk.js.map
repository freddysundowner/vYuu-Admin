{"version":3,"sources":["pages/ResetPassword.js","services/httpService.js","components/form/Error.js","components/form/LabelArea.js","services/AdminServices.js"],"names":["ResetPassword","token","useParams","password","useRef","loading","setLoading","useState","register","handleSubmit","watch","formState","errors","useForm","current","_jsx","className","children","_jsxs","onSubmit","_ref","newPassword","AdminServices","resetPassword","then","res","notifySuccess","message","catch","err","notifyError","response","data","LabelArea","label","Input","name","type","placeholder","required","minLength","value","Error","errorName","validate","confirm_password","Button","disabled","block","Link","to","instance","axios","create","baseURL","timeout","headers","Accept","interceptors","request","use","config","adminInfo","Cookies","get","JSON","parse","authorization","responseBody","requests","url","body","post","put","patch","delete","_Fragment","Label","registerAdmin","loginAdmin","loginUser","authenticateUser","forgetPassword","signUpWithProvider","addAdmin","getAllAdmin","getAdminById","id","updateAdmin","deleteAdmin","updateAppSettings","getAppSettings"],"mappings":"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","file":"static/js/15.b2574c0b.chunk.js","sourcesContent":["import { Button, Input } from '@windmill/react-ui';\nimport React, { useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useParams } from 'react-router';\nimport { useForm } from 'react-hook-form';\n\nimport Error from '../components/form/Error';\nimport LabelArea from '../components/form/LabelArea';\nimport AdminServices from '../services/AdminServices';\nimport { notifyError, notifySuccess } from '../utils/toast';\n\nconst ResetPassword = () => {\n  const { token } = useParams();\n  const password = useRef('');\n  const [loading, setLoading] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm();\n\n  password.current = watch('newPassword');\n\n  const submitHandler = ({ newPassword }) => {\n    setLoading(true);\n\n    AdminServices.resetPassword({ newPassword, token })\n      .then((res) => {\n        setLoading(false);\n        notifySuccess(res.message);\n      })\n      .catch((err) => {\n        setLoading(false);\n        notifyError(err ? err.response.data.message : err.message);\n      });\n  };\n\n  return (\n    <div className=\"flex items-center min-h-screen p-6 bg-gray-50 dark:bg-gray-900\">\n      <div className=\"flex-1 h-full max-w-4xl mx-auto overflow-hidden bg-white rounded-lg shadow-xl dark:bg-gray-800\">\n        <div className=\"flex flex-col overflow-y-auto md:flex-row\">\n          <main className=\"flex items-center justify-center p-6 sm:p-12 md:w-1/2\">\n            <div className=\"w-full\">\n              <h1 className=\"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200\">\n                Reset password\n              </h1>\n\n              <form onSubmit={handleSubmit(submitHandler)}>\n                <LabelArea label=\"Password\" />\n                <Input\n                  label=\"Password\"\n                  name=\"newPassword\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  {...register('newPassword', {\n                    required: 'You must specify a password',\n                    minLength: {\n                      value: 10,\n                      message: 'Password must have at least 10 characters',\n                    },\n                  })}\n                  className=\"border h-12 text-sm focus:outline-none block w-full bg-gray-100 dark:bg-white border-transparent focus:bg-white\"\n                />\n                <Error errorName={errors.newPassword} />\n                <div className=\"mt-6\"></div>\n                <LabelArea label=\"Confirm Password\" />\n                <Input\n                  label=\"Confirm Password\"\n                  name=\"confirm_password\"\n                  type=\"password\"\n                  placeholder=\"Confirm Password\"\n                  {...register('confirm_password', {\n                    validate: (value) =>\n                      value === password.current ||\n                      'The passwords do not match',\n                  })}\n                  className=\"border h-12 text-sm focus:outline-none block w-full bg-gray-100 dark:bg-white border-transparent focus:bg-white\"\n                />\n                <Error errorName={errors.confirm_password} />\n\n                <Button\n                  disabled={loading}\n                  type=\"submit\"\n                  block\n                  className=\"mt-4 h-12\"\n                >\n                  Reset\n                </Button>\n              </form>\n              <p className=\"mt-4\">\n                <Link\n                  className=\"text-sm font-medium text-green-500 dark:text-green-400 hover:underline\"\n                  to=\"/login\"\n                >\n                  Already have an account? Login\n                </Link>\n              </p>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n","import axios from \"axios\";\nimport Cookies from \"js-cookie\";\nconst instance = axios.create({\n  baseURL: `${process.env.REACT_APP_API_BASE_URL}`,\n  timeout: 500000,\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Add a request interceptor\ninstance.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  let adminInfo;\n  if (Cookies.get(\"adminInfo\")) {\n    adminInfo = JSON.parse(Cookies.get(\"adminInfo\"));\n  }\n\n  return {\n    ...config,\n    headers: {\n      authorization: adminInfo ? `Bearer ${adminInfo.token}` : null,\n    },\n  };\n});\n\nconst responseBody = (response) => response.data;\n\nconst requests = {\n  get: (url, body, headers) =>\n    instance.get(url, body, headers).then(responseBody),\n\n  post: (url, body) => instance.post(url, body).then(responseBody),\n\n  put: (url, body, headers) =>\n    instance.put(url, body, headers).then(responseBody),\n\n  patch: (url, body) => instance.patch(url, body).then(responseBody),\n\n  delete: (url) => instance.delete(url).then(responseBody),\n};\n\nexport default requests;\n","import React from \"react\";\n\nconst Error = ({ errorName }) => {\n  return (\n    <>\n      {errorName && (\n        <span className=\"text-red-400 text-sm mt-2\">{errorName.message}</span>\n      )}\n    </>\n  );\n};\n\nexport default Error;\n","import React from \"react\";\nimport { Label } from \"@windmill/react-ui\";\n\nconst LabelArea = ({ label }) => {\n  return (\n    <Label className=\"col-span-4 sm:col-span-2 font-medium text-sm\">\n      {label}\n    </Label>\n  );\n};\n\nexport default LabelArea;\n","import requests from \"./httpService\";\n\nconst AdminServices = {\n  registerAdmin(body) {\n    return requests.post(\"/admin/register\", body);\n  },\n\n  loginAdmin(body) {\n    return requests.post(`/admin/login`, body);\n  },\n\n  loginUser(body) {\n    return requests.post(`/login`, body);\n  },\n  authenticateUser(body) {\n    return requests.post(`/authenticate/social`, body);\n  },\n\n  forgetPassword(body) {\n    return requests.put(\"/admin/forget-password\", body);\n  },\n\n  resetPassword(body) {\n    return requests.put(\"/admin/reset-password\", body);\n  },\n\n  signUpWithProvider(body) {\n    return requests.post(\"/admin/signup\", body);\n  },\n\n  addAdmin(body) {\n    return requests.post(\"/admin\", body);\n  },\n  getAllAdmin() {\n    return requests.get(\"/admin\");\n  },\n  getAdminById(id) {\n    return requests.get(`/admin/id/${id}`);\n  },\n\n  updateAdmin(id, body) {\n    return requests.patch(`/admin/${id}`, body);\n  },\n  deleteAdmin(id) {\n    return requests.delete(`/admin/${id}`);\n  },\n  updateAppSettings(body) {\n    return requests.post(`/admin/app/settings`, body);\n  },\n  getAppSettings() {\n    return requests.get(`/admin/app/settings`);\n  },\n};\n\nexport default AdminServices;\n"],"sourceRoot":""}