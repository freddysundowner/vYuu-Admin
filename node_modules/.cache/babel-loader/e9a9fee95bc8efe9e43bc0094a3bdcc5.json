{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport React from \"react\";\nimport { safeHtmlString } from \"../utils/functions\";\nvar ContentEditable = function (_super) {\n  __extends(ContentEditable, _super);\n  function ContentEditable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.focused = false;\n    _this.removed = false;\n    _this.preFocusedValue = \"\";\n    _this.onPaste = function (e) {\n      e.preventDefault();\n      var text = e.clipboardData.getData(\"text/plain\");\n      document.execCommand(\"insertHTML\", false, safeHtmlString(text));\n    };\n    _this.onFocus = function () {\n      _this.preFocusedValue = _this.getValue();\n      _this.focused = true;\n    };\n    _this.onBlur = function () {\n      _this.focused = false;\n      var ref = _this.props.innerEditableRef.current;\n      var _a = _this.props,\n        validator = _a.validator,\n        change = _a.change;\n      if (!_this.removed && ref) {\n        if (ref.innerText === \"\") {\n          _this.props.remove();\n          return;\n        }\n        if (validator) {\n          var valid = validator(_this.getValue());\n          if (!valid) {\n            ref.innerText = _this.preFocusedValue;\n            return;\n          }\n        }\n        change(ref.innerText);\n      }\n    };\n    _this.onKeyDown = function (e) {\n      if (e.keyCode === 13) {\n        e.preventDefault();\n        _this.focusInputRef();\n        return;\n      }\n      var removeOnBackspace = _this.props.removeOnBackspace;\n      var value = _this.getValue();\n      if (removeOnBackspace && e.keyCode === 8 && value === \"\") {\n        _this.removed = true;\n        _this.props.remove();\n        _this.focusInputRef();\n        return;\n      }\n    };\n    _this.getValue = function () {\n      var ref = _this.getRef();\n      return ref ? ref.innerText : \"\";\n    };\n    _this.getRef = function () {\n      return _this.props.innerEditableRef.current;\n    };\n    _this.focusInputRef = function () {\n      var inputRef = _this.props.inputRef;\n      if (inputRef && inputRef.current) {\n        inputRef.current.focus();\n      }\n    };\n    return _this;\n  }\n  ContentEditable.prototype.componentDidMount = function () {\n    this.preFocusedValue = this.getValue();\n  };\n  ContentEditable.prototype.render = function () {\n    var _a = this.props,\n      value = _a.value,\n      className = _a.className,\n      innerEditableRef = _a.innerEditableRef;\n    return React.createElement(\"div\", {\n      ref: innerEditableRef,\n      className: className,\n      contentEditable: true,\n      onPaste: this.onPaste,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onKeyDown: this.onKeyDown,\n      dangerouslySetInnerHTML: {\n        __html: safeHtmlString(value)\n      }\n    });\n  };\n  return ContentEditable;\n}(React.Component);\nexport { ContentEditable };","map":{"version":3,"sources":["../../../src/components/ContentEditable.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {safeHtmlString} from \"../utils/functions\";\n\ninterface Props {\n  value: string;\n  className: string;\n  innerEditableRef: React.RefObject<HTMLDivElement>;\n  inputRef: React.RefObject<HTMLInputElement>;\n  change: (value: string) => void;\n  remove: () => void;\n  validator?: (value: string) => boolean;\n  removeOnBackspace?: boolean;\n}\n\nexport class ContentEditable extends React.Component<Props> {\n\n  // Track focus state of editable tag\n  focused: boolean = false;\n\n  // Track if element has been removed from DOM\n  removed: boolean = false;\n\n  // Save value before input is focused / user starts typing\n  preFocusedValue: string = \"\";\n\n  componentDidMount() {\n    this.preFocusedValue = this.getValue();\n  }\n\n  onPaste = (e: React.ClipboardEvent<HTMLDivElement>) => {\n\n    // Cancel paste event\n    e.preventDefault();\n\n    // Remove formatting from clipboard contents\n    const text = e.clipboardData.getData(\"text/plain\");\n\n    // Insert text manually from paste command\n    document.execCommand(\"insertHTML\", false, safeHtmlString(text));\n\n  }\n\n  onFocus = () => {\n    this.preFocusedValue = this.getValue();\n    this.focused = true;\n  }\n\n  onBlur = () => {\n\n    this.focused = false;\n\n    const ref = this.props.innerEditableRef.current;\n    const { validator, change } = this.props;\n\n    if (!this.removed && ref) {\n\n      // On blur, if no content in tag, remove it\n      if (ref.innerText === \"\") {\n        this.props.remove();\n        return;\n      }\n\n      // Validate input if needed\n      if (validator) {\n        const valid = validator(this.getValue());\n        // If invalidate, switch ref back to pre focused value\n        if (!valid) {\n          ref.innerText = this.preFocusedValue;\n          return;\n        }\n      }\n\n      change(ref.innerText);\n\n    }\n\n  }\n\n  onKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n\n    // On enter, focus main tag input\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      this.focusInputRef();\n      return;\n    }\n\n    // On backspace, if no content in ref, remove tag and focus main tag input\n    const { removeOnBackspace } = this.props;\n    const value = this.getValue();\n    if (removeOnBackspace && e.keyCode === 8 && value === \"\") {\n      this.removed = true;\n      this.props.remove();\n      this.focusInputRef();\n      return;\n    }\n\n  }\n\n  getValue = () => {\n    const ref = this.getRef();\n    return ref ? ref.innerText : \"\";\n  }\n\n  getRef = () => {\n    return this.props.innerEditableRef.current;\n  }\n\n  focusInputRef = () => {\n    const { inputRef } = this.props;\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }\n\n  render() {\n    const { value, className, innerEditableRef } = this.props;\n    return (\n      <div\n        ref={innerEditableRef}\n        className={className}\n        contentEditable={true}\n        onPaste={this.onPaste}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        onKeyDown={this.onKeyDown}\n        dangerouslySetInnerHTML={{ __html: safeHtmlString(value) }}\n      />\n    );\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}